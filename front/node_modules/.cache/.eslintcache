[{"/home/alex/code/TodoWithBackend/front/src/index.tsx":"1","/home/alex/code/TodoWithBackend/front/src/App.tsx":"2","/home/alex/code/TodoWithBackend/front/src/store/store.ts":"3","/home/alex/code/TodoWithBackend/front/src/app/appReducer.ts":"4","/home/alex/code/TodoWithBackend/front/src/features/todos/Todo.tsx":"5","/home/alex/code/TodoWithBackend/front/src/features/tasks/tasksReducer.ts":"6","/home/alex/code/TodoWithBackend/front/src/features/todos/todosReducer.ts":"7","/home/alex/code/TodoWithBackend/front/src/features/mainInput/MainInput.tsx":"8","/home/alex/code/TodoWithBackend/front/src/features/theme/Theme.tsx":"9","/home/alex/code/TodoWithBackend/front/src/features/todos/AddTodo/AddTodo.tsx":"10","/home/alex/code/TodoWithBackend/front/src/features/common/Button.tsx":"11","/home/alex/code/TodoWithBackend/front/src/features/todos/Todo.styles.tsx":"12","/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.tsx":"13","/home/alex/code/TodoWithBackend/front/src/api/tasksApi.ts":"14","/home/alex/code/TodoWithBackend/front/src/utils/error-utils.ts":"15","/home/alex/code/TodoWithBackend/front/src/api/todosApi.ts":"16","/home/alex/code/TodoWithBackend/front/src/features/mainInput/MainInput.styles.tsx":"17","/home/alex/code/TodoWithBackend/front/src/features/theme/Theme.styles.tsx":"18","/home/alex/code/TodoWithBackend/front/src/api/baseUrl.ts":"19","/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.styles.tsx":"20","/home/alex/code/TodoWithBackend/front/src/messageData.ts":"21","/home/alex/code/TodoWithBackend/front/src/features/helpChat/HelpChat.tsx":"22","/home/alex/code/TodoWithBackend/front/src/AppStyles.ts":"23","/home/alex/code/TodoWithBackend/front/src/features/helpChat/HelpChatStyles.ts":"24"},{"size":316,"mtime":1692864253186,"results":"25","hashOfConfig":"26"},{"size":2247,"mtime":1694068344118,"results":"27","hashOfConfig":"26"},{"size":791,"mtime":1693381331321,"results":"28","hashOfConfig":"26"},{"size":1565,"mtime":1692862566486,"results":"29","hashOfConfig":"26"},{"size":4734,"mtime":1693384675031,"results":"30","hashOfConfig":"26"},{"size":4726,"mtime":1693317347150,"results":"31","hashOfConfig":"26"},{"size":4722,"mtime":1693142713220,"results":"32","hashOfConfig":"26"},{"size":2829,"mtime":1693384560251,"results":"33","hashOfConfig":"26"},{"size":937,"mtime":1693138466640,"results":"34","hashOfConfig":"26"},{"size":640,"mtime":1693298743960,"results":"35","hashOfConfig":"26"},{"size":2434,"mtime":1693293998000,"results":"36","hashOfConfig":"26"},{"size":2530,"mtime":1693381665981,"results":"37","hashOfConfig":"26"},{"size":2717,"mtime":1693382068831,"results":"38","hashOfConfig":"26"},{"size":662,"mtime":1692883241003,"results":"39","hashOfConfig":"26"},{"size":791,"mtime":1692862674296,"results":"40","hashOfConfig":"26"},{"size":652,"mtime":1692880442354,"results":"41","hashOfConfig":"26"},{"size":491,"mtime":1693381237081,"results":"42","hashOfConfig":"26"},{"size":558,"mtime":1693381250861,"results":"43","hashOfConfig":"26"},{"size":113,"mtime":1692796746278,"results":"44","hashOfConfig":"26"},{"size":1252,"mtime":1693383014041,"results":"45","hashOfConfig":"26"},{"size":620,"mtime":1694431763899,"results":"46","hashOfConfig":"26"},{"size":3557,"mtime":1694432769899,"results":"47","hashOfConfig":"26"},{"size":843,"mtime":1694081424257,"results":"48","hashOfConfig":"26"},{"size":3257,"mtime":1694172891800,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"qi2rvu",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"53"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/home/alex/code/TodoWithBackend/front/src/index.tsx",[],[],[],"/home/alex/code/TodoWithBackend/front/src/App.tsx",["130","131","132","133","134","135","136"],[],"import {useEffect, useState} from \"react\";\nimport {getTodos} from \"./features/todos/todosReducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"./store/store\";\nimport {TodoType} from \"./api/apiTypes\";\nimport {App__Title, App__Wrapper, Error__Wrapper, Header__Container, Input__Wrapper, Todo__Wrapper} from \"./AppStyles\";\n\nimport {createTodoHandler} from \"./features/todos/AddTodo/AddTodo\";\n\nimport MainInput from \"./features/mainInput/MainInput\";\nimport HelpChat from \"./features/helpChat/HelpChat\";\nimport Theme from \"./features/theme/Theme\";\nimport Button from \"./features/common/Button\";\nimport {getTasks} from \"./features/tasks/tasksReducer\";\nimport {Todo} from \"./features/todos/Todo\";\n\nfunction App() {\n    const [todo, setTodo] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [modal, setModal] = useState(false);\n    const todos = useSelector<AppRootStateType, TodoType[]>((state) => state.todos);\n    const dispatch = useAppDispatch();\n    const mappedTodos = todos.map((el) => {\n        return <Todo key={el.todo_id} todo={el} />;\n    });\n    useEffect(() => {\n        dispatch(getTodos());\n        dispatch(getTasks());\n    }, []);\n    return (\n        <App__Wrapper>\n            <Header__Container>\n                <App__Title>Welcome to Todo App </App__Title>\n                <Theme />\n            </Header__Container>\n\n            <Input__Wrapper>\n                <div>\n                    <MainInput\n                        placeholder=\"new todo\"\n                        todo={todo}\n                        setTodo={setTodo}\n                        setError={setError}\n                        id=\"mainInput\"\n                        editTodoHandler={() => createTodoHandler({todo, setTodo, setError, dispatch})}\n                        todo_id=\"7\"\n                    />\n                    <Error__Wrapper>{error}</Error__Wrapper>\n                </div>\n                <Button name=\"Add todo\" onClick={() => createTodoHandler({todo, setTodo, setError, dispatch})} />\n            </Input__Wrapper>\n            <Todo__Wrapper>{mappedTodos}</Todo__Wrapper>\n            <HelpChat modal={modal} setModal={setModal}/>\n        </App__Wrapper>\n    );\n}\n\nexport default App;\n","/home/alex/code/TodoWithBackend/front/src/store/store.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/app/appReducer.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/todos/Todo.tsx",["137","138","139","140","141","142","143","144"],[],"import React, {useState} from \"react\";\r\nimport {TaskType, TodoType} from \"../../api/apiTypes\";\r\nimport {deleteTodo, updateTodo} from \"./todosReducer\";\r\nimport Button from \"../common/Button\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../store/store\";\r\nimport {\r\n    Button__Container,\r\n    Task__Container,\r\n    Task__Error__Wrapper,\r\n    Todo__Container,\r\n    Todo__Container__Wrapper,\r\n    Todo__Label,\r\n    addBtn,\r\n    closeBtn,\r\n    editBtn,\r\n} from \"./Todo.styles\";\r\nimport MainInput from \"../mainInput/MainInput\";\r\nimport Task from \"../tasks/Task\";\r\nimport {createTask, getTasks} from \"../tasks/tasksReducer\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\ntype TodosType = {\r\n    todo: TodoType;\r\n};\r\n\r\nexport function Todo({todo}: TodosType) {\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>((state) => state.tasks);\r\n    const {todo_id, todo_name} = todo;\r\n    const [task, setTask] = useState(\"\");\r\n    const [todoName, changeTodoName] = useState(todo_name);\r\n    const [visible, setVisible] = useState(true);\r\n    const [taskError, setTaskError] = useState(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const filteredTasksForTodo = tasks.filter((el) => (el.tasks_todo_id == todo_id ? el : \"\"));\r\n    const filteredTasks: TaskType[] = filteredTasksForTodo.reduce(function (acc: TaskType[], el: TaskType, i: number) {\r\n        el.task_id >= filteredTasksForTodo[i].task_id ? acc.unshift(el) : acc.push(el);\r\n        return acc;\r\n    }, []);\r\n    const mappedTasks = filteredTasks.map((el) => {\r\n        return <Task task={el} key={el.task_id} />;\r\n    });\r\n    const editTodoHandler = (id: string, value: string) => {\r\n        const updatedCurrentTodo = {\r\n            todo_name: value,\r\n            todo_filter: \"updated\",\r\n        };\r\n        dispatch(updateTodo({id, data: updatedCurrentTodo}));\r\n    };\r\n    const deleteTodoHandler = (id: string) => {\r\n        dispatch(deleteTodo(id));\r\n    };\r\n    const doubleClickHandler = () => {\r\n        setVisible(false);\r\n    };\r\n    const editHandler = () => setVisible(true);\r\n    const createNewTask = (value: string) => {\r\n        console.log(3)\r\n        if (value.trim()) {\r\n            console.log(5)\r\n            dispatch(\r\n                createTask({\r\n                    task_name: value,\r\n                    taks_is_done: false,\r\n                    tasks_todo_id: todo_id,\r\n                })\r\n            );\r\n            dispatch(getTasks());\r\n            setTask(\"\");\r\n            return;\r\n        }\r\n        console.log(6)\r\n        setTaskError(\"task name can't be empty\");\r\n    };\r\n\r\n    return (\r\n        <Todo__Container $width=\"400px\">\r\n            <Todo__Container__Wrapper>\r\n                <Todo__Label $width=\"400px\">\r\n                    <Button__Container $width=\"70%\">\r\n                        {visible ? (\r\n                            <span\r\n                                style={{color: \"black\", fontSize: \"1.2em\", fontWeight: \"500\"}}\r\n                                onDoubleClick={doubleClickHandler}>\r\n                                {todoName}\r\n                            </span>\r\n                        ) : (\r\n                            <MainInput\r\n                                todo={todoName}\r\n                                setTodo={changeTodoName}\r\n                                setError={setTaskError}\r\n                                edit={editHandler}\r\n                                editTodoHandler={editTodoHandler}\r\n                                todo_id={todo_id}\r\n                            />\r\n                        )}\r\n                    </Button__Container>\r\n                    <Button icon={editBtn} onClick={doubleClickHandler} />\r\n                    <Button icon={closeBtn} onClick={() => deleteTodoHandler(todo_id)} tooltip=\"delete todo\" />\r\n                </Todo__Label>\r\n\r\n                <Button__Container $width=\"400px\">\r\n                    <div>\r\n                        <MainInput\r\n                            placeholder=\"new task\"\r\n                            todo={task}\r\n                            setTodo={setTask}\r\n                            setError={setTaskError}\r\n                            id=\"taskInput\"\r\n                            editTodoHandler={(id, value)=>createNewTask(value)}\r\n                            todo_id={todo_id}\r\n                        />\r\n                        <Task__Error__Wrapper>{taskError}</Task__Error__Wrapper>\r\n                    </div>\r\n                    <Button icon={addBtn} onClick={() => createNewTask(task)} tooltip=\"create task\" />\r\n                </Button__Container>\r\n\r\n                <Task__Container>{mappedTasks}</Task__Container>\r\n            </Todo__Container__Wrapper>\r\n        </Todo__Container>\r\n    );\r\n}\r\n","/home/alex/code/TodoWithBackend/front/src/features/tasks/tasksReducer.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/todos/todosReducer.ts",["145"],[],"import {PayloadAction, createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport todosApi from \"../../api/todosApi\";\r\nimport {CreateTodoType, TodoType} from \"../../api/apiTypes\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TodoType[] = [];\r\n\r\nexport const getTodos = createAsyncThunk(\"todos/get\", async (args, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await todosApi\r\n            .getTodos()\r\n            .then((res) => {\r\n                let todos = res.data;\r\n                console.log(todos);\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n\r\n                return {todos};\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                const todos = [] as TodoType[];\r\n                return {todos};\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        const todos = [] as TodoType[];\r\n        return {todos};\r\n    }\r\n});\r\n\r\nexport const createTodo = createAsyncThunk(\"todos/create\", async (data: CreateTodoType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await todosApi\r\n            .createTodo(data)\r\n            .then((res) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                thunkAPI.dispatch(getTodos());\r\n                return \"\";\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                return \"\";\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        return \"\";\r\n    }\r\n});\r\n\r\nexport const deleteTodo = createAsyncThunk(\"todos/delete\", async (id: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await todosApi\r\n            .deleteTodo(id)\r\n            .then((res) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                thunkAPI.dispatch(getTodos());\r\n                return \"\";\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                return \"\";\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        return \"\";\r\n    }\r\n});\r\n\r\nexport const updateTodo = createAsyncThunk(\r\n    \"todos/update\",\r\n    async (params: {id: string; data: CreateTodoType}, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n        try {\r\n            return await todosApi\r\n                .updateTodo(params)\r\n                .then((res) => {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                    thunkAPI.dispatch(getTodos());\r\n                    return \"\";\r\n                })\r\n                .catch((error) => {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                    handleServerNetworkError(error, thunkAPI.dispatch);\r\n                    return \"\";\r\n                });\r\n        } catch (e) {\r\n            const err = e as Error | AxiosError<{error: string}>;\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n            return \"\";\r\n        }\r\n    }\r\n);\r\n\r\nconst slice = createSlice({\r\n    name: \"todos\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(getTodos.fulfilled, (state, action) => {\r\n                return (state = action.payload.todos);\r\n            })\r\n            .addCase(createTodo.fulfilled, (state, action) => {})\r\n            .addCase(deleteTodo.fulfilled, (state, action) => {})\r\n            .addCase(updateTodo.fulfilled, (state, action) => {});\r\n    },\r\n});\r\n\r\nexport const todosReducer = slice.reducer;\r\n","/home/alex/code/TodoWithBackend/front/src/features/mainInput/MainInput.tsx",["146","147","148"],[],"import React, {ChangeEvent, useState} from \"react\";\r\nimport {Todo__Input__Container, Todo__Input} from \"./MainInput.styles\";\r\n\r\nexport type InputType = {\r\n    setTodo: (value: string) => void;\r\n    setError: (value: string) => void;\r\n    todo: string;\r\n    placeholder?: string;\r\n    edit?: () => void;\r\n    id?: string;\r\n    todo_id?: string;\r\n    editTodoHandler?: (id: string, value: string) => void;\r\n};\r\nexport default function MainInput({\r\n    setTodo,\r\n    todo,\r\n    setError,\r\n    placeholder,\r\n    edit,\r\n    id,\r\n    editTodoHandler,\r\n    todo_id,\r\n}: InputType) {\r\n    const [currentState, setCurrentState] = useState(todo);\r\n    const valueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (id === \"mainInput\") {\r\n            setTodo(e.currentTarget.value);\r\n            setCurrentState(e.currentTarget.value);\r\n            setError(\"\");\r\n            return;\r\n        } else if (id === \"taskInput\") {\r\n            setTodo(e.currentTarget.value);\r\n            setCurrentState(e.currentTarget.value);\r\n            setError(\"\");\r\n            return;\r\n        } else {\r\n            setCurrentState(e.currentTarget.value);\r\n            setError(\"\");\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        console.log(\"pressed\")\r\n        if (currentState.trim()) {\r\n            console.log(\"pressed1\")\r\n            if (e.key === \"Enter\") {\r\n                console.log(\"pressed2\")\r\n                setCurrentState(e.currentTarget.value);\r\n                setTodo(e.currentTarget.value);\r\n                console.log(todo_id, editTodoHandler)\r\n                todo_id && editTodoHandler && editTodoHandler(todo_id, e.currentTarget.value);\r\n                edit && edit();\r\n                return;\r\n            }\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            console.log(\"pressed3\")\r\n            setError(\"task name can't be empty\");\r\n        }\r\n    };\r\n\r\n    const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key == \"Escape\") {\r\n            edit && edit();\r\n            setTodo(todo);\r\n            setError(\"\");\r\n        }\r\n        return;\r\n    };\r\n\r\n    const onBlurHandler = () => {\r\n        edit && edit();\r\n        setTodo(todo);\r\n        setError(\"\");\r\n    };\r\n    return (\r\n        <Todo__Input__Container>\r\n            <Todo__Input\r\n                type=\"text\"\r\n                placeholder={placeholder}\r\n                value={id === \"mainInput\" || id === \"taskInput\" ? todo : currentState}\r\n                onChange={valueHandler}\r\n                onKeyPress={handleKeyPress}\r\n                onKeyUp={handleKeyUp}\r\n                onBlur={onBlurHandler}\r\n                id={id}\r\n                autoFocus={id === \"mainInput\" ? false : true}\r\n            />\r\n        </Todo__Input__Container>\r\n    );\r\n}\r\n","/home/alex/code/TodoWithBackend/front/src/features/theme/Theme.tsx",["149","150","151"],[],"import React, {useEffect, useState} from \"react\";\r\nimport {ReactComponent as Moon} from \"./../../asserts/theme/moon-solid.svg\";\r\nimport {ReactComponent as Sun} from \"./../../asserts/theme/sun-regular.svg\";\r\nimport {Theme__Container, Theme__Wrapper} from \"./Theme.styles\";\r\n\r\nexport default function Theme() {\r\n    const [state, setTheme] = useState(1);\r\n\r\n    useEffect(() => {\r\n        document.documentElement.dataset.theme = state + \"\";\r\n    }, [state]);\r\n\r\n    const changeTheme = () => {\r\n        state === 1 ? setTheme(2) : setTheme(1);\r\n    };\r\n    return (\r\n        <Theme__Container onClick={changeTheme}>\r\n            <Theme__Wrapper className={state === 1 ? \"\" : \"active\"}>\r\n                <Sun fill=\"black\" />\r\n            </Theme__Wrapper>\r\n\r\n            <Theme__Wrapper className={state === 2 ? \"\" : \"active\"}>\r\n                <Moon fill=\"white\" />\r\n            </Theme__Wrapper>\r\n        </Theme__Container>\r\n    );\r\n}\r\n","/home/alex/code/TodoWithBackend/front/src/features/todos/AddTodo/AddTodo.tsx",[],[],"/home/alex/code/TodoWithBackend/front/src/features/common/Button.tsx",["152","153","154"],[],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Div__Container} from \"../../AppStyles\";\r\n\r\ntype AddTodoType = {\r\n    name?: string;\r\n    icon?: React.ReactNode;\r\n    onClick?: () => void;\r\n    onClickWithData?: (value: string) => void;\r\n    tooltip?: string;\r\n    disabled?: boolean;\r\n};\r\n\r\nconst Todo__Button = styled.button<{$dark?: boolean}>`\r\n    background: ${(props) => (props.$dark ? \"#BF4F74\" : \"white\")};\r\n    font-size: 1em;\r\n    margin-left: 1em;\r\n    padding: 0em 1em;\r\n    border-radius: 3px;\r\n    border: 1px solid black;\r\n    font-weight: 600;\r\n    &:hover {\r\n        transition: 0.2s;\r\n        background: #3bc0aa;\r\n    }\r\n`;\r\nconst Todo__Icon = styled(Div__Container)<{$dark?: boolean}>`\r\n    position: relative;\r\n    background: ${(props) => (props.$dark ? \"#BF4F74\" : \"white\")};\r\n    min-width: 20px;\r\n    min-height: 20px;\r\n    margin-left: 1em;\r\n    padding: 0.2em;\r\n    border-radius: 3px;\r\n    border: 1px solid black;\r\n    &:hover {\r\n        transition: 0.2s;\r\n        background: #3bc0aa;\r\n    }\r\n    /* &:hover span {\r\n        visibility: visible;\r\n        opacity: 1;\r\n        transition: 0.2s;\r\n    }\r\n    & span {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n        position: absolute; \r\n        top: -85%;\r\n        left: 15px;\r\n        text-align: center; \r\n        padding: 5px; \r\n        height: auto; \r\n        background: #e8eb0e;\r\n        color: #000000;\r\n        font-size: 0.6em;\r\n        width: 50px;\r\n    } */\r\n`;\r\nconst Todo__Icon__disabled = styled(Div__Container)<{$dark?: boolean}>`\r\n    position: relative;\r\n    background: ${(props) => (props.$dark ? \"#BF4F74\" : \"white\")};\r\n    min-width: 20px;\r\n    min-height: 20px;\r\n    margin-left: 1em;\r\n    padding: 0.2em;\r\n    border-radius: 3px;\r\n    border: 1px solid black;\r\n    &:hover {\r\n        transition: 0.2s;\r\n        background: #3bc0aa;\r\n    }\r\n`;\r\n\r\nexport default function Button({name, onClick, icon, tooltip, disabled}: AddTodoType) {\r\n    const regularIcon = <Todo__Icon onClick={onClick}>{icon}</Todo__Icon>;\r\n    const disabledIcon = <Todo__Icon__disabled onClick={onClick}>{icon}</Todo__Icon__disabled>;\r\n    const todoIcon = disabled ? regularIcon : disabledIcon;\r\n    return name ? (\r\n        <>\r\n            <Todo__Button $dark={false} onClick={onClick} disabled={disabled}>\r\n                {name}\r\n            </Todo__Button>\r\n        </>\r\n    ) : (\r\n        <>{todoIcon}</>\r\n    );\r\n}\r\n","/home/alex/code/TodoWithBackend/front/src/features/todos/Todo.styles.tsx",[],[],"/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.tsx",["155","156","157","158","159"],[],"import React, {useState} from \"react\";\r\nimport {TaskType} from \"../../api/apiTypes\";\r\nimport {Task__Container, Task__Input__Wrapper, Task__Label, Task__Name__Error__Wrapper, Task__Name__Wrapper} from \"./Task.styles\";\r\nimport {closeBtn} from \"../todos/Todo.styles\";\r\nimport Button from \"../common/Button\";\r\nimport {useAppDispatch} from \"../../store/store\";\r\nimport {deleteTask, updateTask} from \"./tasksReducer\";\r\nimport MainInput from \"../mainInput/MainInput\";\r\n\r\ntype TaskComponentType = {\r\n    task: TaskType;\r\n};\r\n\r\nexport default function Task({task}: TaskComponentType) {\r\n    const [checked1, setChecked] = useState(!!task.task_is_done);\r\n    const [todoName, changeTaskName] = useState(task.task_name);\r\n    const [visible, setVisible] = useState(true);\r\n    const [taskError, setTaskError] = useState(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const deleteTaskHandler = (id: string) => {\r\n        dispatch(deleteTask(id));\r\n    };\r\n    const doubleClickHandler = () => {\r\n        setVisible(false);\r\n    };\r\n    const editHandler = () => setVisible(true);\r\n    const editTaskHandler = (id: string, value: string) => {\r\n        if (value.trim()) {\r\n            const updatedCurrentTodo = {\r\n                task_name: value,\r\n                taks_is_done: checked1,\r\n                tasks_todo_id: id\r\n            };\r\n            dispatch(updateTask({id, data: updatedCurrentTodo}));\r\n            return\r\n        }\r\n        setTaskError(\"task name can't be empty\");\r\n    };\r\n    return (\r\n        <Task__Container $width=\"100%\">\r\n            {visible ? (\r\n                <Task__Name__Wrapper $width=\"100%\">\r\n                    <Task__Label $isDone={checked1} onClick={doubleClickHandler}>\r\n                        {task.task_name}\r\n                    </Task__Label>\r\n                    <input type=\"checkbox\" checked={checked1} onChange={() => setChecked(!checked1)} />\r\n                    {checked1 && (\r\n                        <Button icon={closeBtn} onClick={() => deleteTaskHandler(task.task_id)} tooltip=\"create task\" />\r\n                    )}\r\n                </Task__Name__Wrapper>\r\n            ) : (\r\n                <Task__Input__Wrapper $width=\"100%\">\r\n                    <MainInput\r\n                        todo={todoName}\r\n                        setTodo={changeTaskName}\r\n                        setError={setTaskError}\r\n                        edit={editHandler}\r\n                        editTodoHandler={editTaskHandler}\r\n                        todo_id={task.task_id}\r\n                    />\r\n                    <Task__Name__Error__Wrapper>{taskError}</Task__Name__Error__Wrapper>\r\n                </Task__Input__Wrapper>\r\n            )}\r\n        </Task__Container>\r\n    );\r\n}\r\n","/home/alex/code/TodoWithBackend/front/src/api/tasksApi.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/utils/error-utils.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/api/todosApi.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/mainInput/MainInput.styles.tsx",[],[],"/home/alex/code/TodoWithBackend/front/src/features/theme/Theme.styles.tsx",[],[],"/home/alex/code/TodoWithBackend/front/src/api/baseUrl.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.styles.tsx",[],[],"/home/alex/code/TodoWithBackend/front/src/messageData.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/helpChat/HelpChat.tsx",["160","161","162","163","164","165","166","167","168"],[],"/home/alex/code/TodoWithBackend/front/src/AppStyles.ts",[],[],"/home/alex/code/TodoWithBackend/front/src/features/helpChat/HelpChatStyles.ts",[],[],{"ruleId":"169","severity":1,"message":"170","line":29,"column":8,"nodeType":"171","endLine":29,"endColumn":10,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":31,"column":9,"nodeType":"175","messageId":"176","endLine":31,"endColumn":23},{"ruleId":"173","severity":1,"message":"177","line":32,"column":13,"nodeType":"175","messageId":"176","endLine":32,"endColumn":32},{"ruleId":"173","severity":1,"message":"178","line":33,"column":17,"nodeType":"175","messageId":"176","endLine":33,"endColumn":29},{"ruleId":"173","severity":1,"message":"179","line":37,"column":13,"nodeType":"175","messageId":"176","endLine":37,"endColumn":29},{"ruleId":"173","severity":1,"message":"180","line":48,"column":21,"nodeType":"175","messageId":"176","endLine":48,"endColumn":37},{"ruleId":"173","severity":1,"message":"181","line":52,"column":13,"nodeType":"175","messageId":"176","endLine":52,"endColumn":28},{"ruleId":"182","severity":1,"message":"183","line":34,"column":73,"nodeType":"184","messageId":"185","endLine":34,"endColumn":75},{"ruleId":"173","severity":1,"message":"186","line":76,"column":9,"nodeType":"175","messageId":"176","endLine":76,"endColumn":41},{"ruleId":"173","severity":1,"message":"187","line":77,"column":13,"nodeType":"175","messageId":"176","endLine":77,"endColumn":39},{"ruleId":"173","severity":1,"message":"188","line":78,"column":17,"nodeType":"175","messageId":"176","endLine":78,"endColumn":45},{"ruleId":"173","severity":1,"message":"189","line":79,"column":21,"nodeType":"175","messageId":"176","endLine":79,"endColumn":53},{"ruleId":"173","severity":1,"message":"189","line":101,"column":17,"nodeType":"175","messageId":"176","endLine":101,"endColumn":51},{"ruleId":"173","severity":1,"message":"190","line":112,"column":25,"nodeType":"175","messageId":"176","endLine":112,"endColumn":47},{"ruleId":"173","severity":1,"message":"191","line":117,"column":17,"nodeType":"175","messageId":"176","endLine":117,"endColumn":34},{"ruleId":"192","severity":1,"message":"193","line":1,"column":9,"nodeType":"194","messageId":"195","endLine":1,"endColumn":22},{"ruleId":"182","severity":1,"message":"183","line":63,"column":19,"nodeType":"184","messageId":"185","endLine":63,"endColumn":21},{"ruleId":"173","severity":1,"message":"196","line":77,"column":9,"nodeType":"175","messageId":"176","endLine":77,"endColumn":33},{"ruleId":"173","severity":1,"message":"197","line":78,"column":13,"nodeType":"175","messageId":"176","endLine":88,"endColumn":15},{"ruleId":"173","severity":1,"message":"198","line":17,"column":9,"nodeType":"175","messageId":"176","endLine":17,"endColumn":49},{"ruleId":"173","severity":1,"message":"199","line":18,"column":13,"nodeType":"175","messageId":"176","endLine":18,"endColumn":69},{"ruleId":"173","severity":1,"message":"199","line":22,"column":13,"nodeType":"175","messageId":"176","endLine":22,"endColumn":69},{"ruleId":"173","severity":1,"message":"200","line":76,"column":25,"nodeType":"175","messageId":"176","endLine":76,"endColumn":55},{"ruleId":"173","severity":1,"message":"201","line":77,"column":26,"nodeType":"175","messageId":"176","endLine":77,"endColumn":66},{"ruleId":"173","severity":1,"message":"202","line":81,"column":13,"nodeType":"175","messageId":"176","endLine":81,"endColumn":79},{"ruleId":"173","severity":1,"message":"191","line":40,"column":9,"nodeType":"175","messageId":"176","endLine":40,"endColumn":40},{"ruleId":"173","severity":1,"message":"203","line":42,"column":17,"nodeType":"175","messageId":"176","endLine":42,"endColumn":52},{"ruleId":"173","severity":1,"message":"204","line":43,"column":21,"nodeType":"175","messageId":"176","endLine":43,"endColumn":82},{"ruleId":"173","severity":1,"message":"205","line":52,"column":17,"nodeType":"175","messageId":"176","endLine":52,"endColumn":53},{"ruleId":"173","severity":1,"message":"206","line":61,"column":21,"nodeType":"175","messageId":"176","endLine":61,"endColumn":49},{"ruleId":"173","severity":1,"message":"207","line":52,"column":9,"nodeType":"175","messageId":"176","endLine":52,"endColumn":56},{"ruleId":"173","severity":1,"message":"208","line":56,"column":21,"nodeType":"175","messageId":"176","endLine":56,"endColumn":90},{"ruleId":"173","severity":1,"message":"209","line":57,"column":25,"nodeType":"175","messageId":"176","endLine":57,"endColumn":40},{"ruleId":"173","severity":1,"message":"208","line":64,"column":21,"nodeType":"175","messageId":"176","endLine":64,"endColumn":91},{"ruleId":"173","severity":1,"message":"210","line":74,"column":9,"nodeType":"175","messageId":"176","endLine":74,"endColumn":22},{"ruleId":"173","severity":1,"message":"211","line":76,"column":17,"nodeType":"175","messageId":"176","endLine":76,"endColumn":45},{"ruleId":"173","severity":1,"message":"212","line":77,"column":21,"nodeType":"175","messageId":"176","endLine":77,"endColumn":42},{"ruleId":"173","severity":1,"message":"213","line":82,"column":21,"nodeType":"175","messageId":"176","endLine":82,"endColumn":41},{"ruleId":"173","severity":1,"message":"214","line":93,"column":17,"nodeType":"175","messageId":"176","endLine":93,"endColumn":88},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["215"],"react/jsx-pascal-case","Imported JSX component App__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Header__Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component App__Title must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Input__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Error__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Imported JSX component Todo__Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Container__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Label must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Button__Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Error__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Container must be in PascalCase or SCREAMING_SNAKE_CASE","@typescript-eslint/no-unused-vars","'PayloadAction' is defined but never used.","Identifier","unusedVar","Imported JSX component Todo__Input__Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Input must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Theme__Container must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Theme__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Icon must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Icon__disabled must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Todo__Button must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Name__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Label must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Input__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Task__Name__Error__Wrapper must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Texting__Area must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Chat must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Chat__Support must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Opened must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Header must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Input must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Modal__Help__Closed must be in PascalCase or SCREAMING_SNAKE_CASE",{"desc":"216","fix":"217"},"Update the dependencies array to be: [dispatch]",{"range":"218","text":"219"},[1203,1205],"[dispatch]"]