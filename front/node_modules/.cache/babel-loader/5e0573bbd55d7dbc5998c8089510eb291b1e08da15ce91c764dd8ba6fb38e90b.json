{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { setAppStatusAC } from \"../../app/appReducer\";\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\nimport tasksApi from \"../../api/tasksApi\";\nconst initialState = [];\nexport const getTasks = createAsyncThunk(\"tasks/get\", async (args, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatusAC({\n    status: \"loading\"\n  }));\n  try {\n    return await tasksApi.getTasks().then(res => {\n      let tasks = res.data;\n      console.log(tasks);\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"succeeded\"\n      }));\n      return {\n        tasks\n      };\n    }).catch(error => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"failed\"\n      }));\n      handleServerNetworkError(error, thunkAPI.dispatch);\n      const tasks = [];\n      return {\n        tasks\n      };\n    });\n  } catch (e) {\n    const err = e;\n    handleServerNetworkError(err, thunkAPI.dispatch);\n    thunkAPI.dispatch(setAppStatusAC({\n      status: \"failed\"\n    }));\n    const tasks = [];\n    return {\n      tasks\n    };\n  }\n});\nexport const createTask = createAsyncThunk(\"tasks/create\", async (data, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatusAC({\n    status: \"loading\"\n  }));\n  try {\n    return await tasksApi.createTasks(data).then(res => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"succeeded\"\n      }));\n      thunkAPI.dispatch(getTasks());\n      return \"\";\n    }).catch(error => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"failed\"\n      }));\n      handleServerNetworkError(error, thunkAPI.dispatch);\n      return \"\";\n    });\n  } catch (e) {\n    const err = e;\n    handleServerNetworkError(err, thunkAPI.dispatch);\n    thunkAPI.dispatch(setAppStatusAC({\n      status: \"failed\"\n    }));\n    return \"\";\n  }\n});\nexport const deleteTask = createAsyncThunk(\"tasks/delete\", async (id, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatusAC({\n    status: \"loading\"\n  }));\n  try {\n    return await tasksApi.deleteTasks(id).then(res => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"succeeded\"\n      }));\n      thunkAPI.dispatch(getTasks());\n      return \"\";\n    }).catch(error => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"failed\"\n      }));\n      handleServerNetworkError(error, thunkAPI.dispatch);\n      return \"\";\n    });\n  } catch (e) {\n    const err = e;\n    handleServerNetworkError(err, thunkAPI.dispatch);\n    thunkAPI.dispatch(setAppStatusAC({\n      status: \"failed\"\n    }));\n    return \"\";\n  }\n});\nexport const updateTask = createAsyncThunk(\"tasks/update\", async (params, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatusAC({\n    status: \"loading\"\n  }));\n  try {\n    return await tasksApi.updateTasks(params.id, params.data).then(res => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"succeeded\"\n      }));\n      thunkAPI.dispatch(getTasks());\n      return \"\";\n    }).catch(error => {\n      thunkAPI.dispatch(setAppStatusAC({\n        status: \"failed\"\n      }));\n      handleServerNetworkError(error, thunkAPI.dispatch);\n      return \"\";\n    });\n  } catch (e) {\n    const err = e;\n    handleServerNetworkError(err, thunkAPI.dispatch);\n    thunkAPI.dispatch(setAppStatusAC({\n      status: \"failed\"\n    }));\n    return \"\";\n  }\n});\nconst slice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getTasks.fulfilled, (state, action) => {\n      return state = action.payload.tasks;\n    }).addCase(createTask.fulfilled, (state, action) => {}).addCase(deleteTask.fulfilled, (state, action) => {}).addCase(updateTask.fulfilled, (state, action) => {});\n  }\n});\nexport const tasksReducer = slice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","setAppStatusAC","handleServerNetworkError","tasksApi","initialState","getTasks","args","thunkAPI","dispatch","status","then","res","tasks","data","console","log","catch","error","e","err","createTask","createTasks","deleteTask","id","deleteTasks","updateTask","params","updateTasks","slice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","tasksReducer","reducer"],"sources":["/home/alex/code/TodoWithBackend/front/src/features/tasks/tasksReducer.ts"],"sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {CreateTaksType, TaskType} from \"../../api/apiTypes\";\r\nimport {setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport tasksApi from \"../../api/tasksApi\";\r\n\r\nconst initialState: TaskType[] = [];\r\n\r\nexport const getTasks = createAsyncThunk(\"tasks/get\", async (args, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await tasksApi\r\n            .getTasks()\r\n            .then((res) => {\r\n                let tasks = res.data;\r\n                console.log(tasks);\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n\r\n                return {tasks};\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                const tasks = [] as TaskType[];\r\n                return {tasks};\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        const tasks = [] as TaskType[];\r\n        return {tasks};\r\n    }\r\n});\r\n\r\nexport const createTask = createAsyncThunk(\"tasks/create\", async (data: CreateTaksType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await tasksApi\r\n            .createTasks(data)\r\n            .then((res) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                thunkAPI.dispatch(getTasks());\r\n                return \"\";\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                return \"\";\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        return \"\";\r\n    }\r\n});\r\n\r\nexport const deleteTask = createAsyncThunk(\"tasks/delete\", async (id: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n    try {\r\n        return await tasksApi\r\n            .deleteTasks(id)\r\n            .then((res) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                thunkAPI.dispatch(getTasks());\r\n                return \"\";\r\n            })\r\n            .catch((error) => {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                handleServerNetworkError(error, thunkAPI.dispatch);\r\n                return \"\";\r\n            });\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError<{error: string}>;\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n        return \"\";\r\n    }\r\n});\r\n\r\nexport const updateTask = createAsyncThunk(\r\n    \"tasks/update\",\r\n    async (params: {id: string; data: CreateTaksType}, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}));\r\n        try {\r\n            return await tasksApi\r\n                .updateTasks(params.id, params.data)\r\n                .then((res) => {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                    thunkAPI.dispatch(getTasks());\r\n                    return \"\";\r\n                })\r\n                .catch((error) => {\r\n                    thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n                    handleServerNetworkError(error, thunkAPI.dispatch);\r\n                    return \"\";\r\n                });\r\n        } catch (e) {\r\n            const err = e as Error | AxiosError<{error: string}>;\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}));\r\n            return \"\";\r\n        }\r\n    }\r\n);\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(getTasks.fulfilled, (state, action) => {\r\n                return (state = action.payload.tasks);\r\n            })\r\n            .addCase(createTask.fulfilled, (state, action) => {})\r\n            .addCase(deleteTask.fulfilled, (state, action) => {})\r\n            .addCase(updateTask.fulfilled, (state, action) => {});\r\n    },\r\n});\r\n\r\nexport const tasksReducer = slice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}