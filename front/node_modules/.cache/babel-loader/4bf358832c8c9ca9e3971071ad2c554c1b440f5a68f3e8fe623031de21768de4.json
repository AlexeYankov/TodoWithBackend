{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  status: \"idle\",\n  error: null,\n  isInitialized: false\n};\nconst slice = createSlice({\n  name: \"app\",\n  initialState: initialState,\n  reducers: {\n    setAppErrorAC: (state, action) => {\n      state.error = action.payload.error;\n    },\n    setAppStatusAC: (state, action) => {\n      state.status = action.payload.status;\n    },\n    setAppInitializedAC: (state, action) => {\n      state.isInitialized = action.payload.value;\n    }\n  }\n});\nexport const {\n  setAppErrorAC,\n  setAppStatusAC,\n  setAppInitializedAC\n} = slice.actions;\nexport const appReducer = slice.reducer;","map":{"version":3,"names":["createSlice","initialState","status","error","isInitialized","slice","name","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setAppInitializedAC","value","actions","appReducer","reducer"],"sources":["/home/alex/code/TodoWithBackend/front/src/app/appReducer.ts"],"sourcesContent":["import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n  status: \"idle\",\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType;\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null;\r\n  // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n  isInitialized: boolean;\r\n};\r\n\r\n\r\nconst slice = createSlice({\r\n  name: \"app\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n      state.error = action.payload.error;\r\n    },\r\n    setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n      state.status = action.payload.status;\r\n    },\r\n    setAppInitializedAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n      state.isInitialized = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setAppErrorAC, setAppStatusAC, setAppInitializedAC } = slice.actions;\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport const appReducer = slice.reducer;"],"mappings":"AAAA,SAAQA,WAAW,QAAsB,kBAAkB;AAE3D,MAAMC,YAA8B,GAAG;EACrCC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,IAAI;EACXC,aAAa,EAAE;AACjB,CAAC;AAaD,MAAMC,KAAK,GAAGL,WAAW,CAAC;EACxBM,IAAI,EAAE,KAAK;EACXL,YAAY,EAAEA,YAAY;EAC1BM,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAK,EAAEC,MAA+C,KAAK;MACzED,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;IACpC,CAAC;IACDS,cAAc,EAAEA,CAACH,KAAK,EAAEC,MAAoD,KAAK;MAC/ED,KAAK,CAACP,MAAM,GAAGQ,MAAM,CAACC,OAAO,CAACT,MAAM;IACtC,CAAC;IACDW,mBAAmB,EAAEA,CAACJ,KAAK,EAAEC,MAAyC,KAAK;MACzED,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACC,OAAO,CAACG,KAAK;IAC5C;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,aAAa;EAAEI,cAAc;EAAEC;AAAoB,CAAC,GAAGR,KAAK,CAACU,OAAO;AAInF,OAAO,MAAMC,UAAU,GAAGX,KAAK,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}