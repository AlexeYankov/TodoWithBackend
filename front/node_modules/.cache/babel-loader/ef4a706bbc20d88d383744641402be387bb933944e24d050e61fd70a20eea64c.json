{"ast":null,"code":"var _jsxFileName = \"/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Task__Container, Task__Input__Wrapper, Task__Label, Task__Name__Error__Wrapper, Task__Name__Wrapper } from \"./Task.styles\";\nimport { closeBtn } from \"../todos/Todo.styles\";\nimport Button from \"../common/Button\";\nimport { useAppDispatch } from \"../../store/store\";\nimport { deleteTask, updateTask } from \"./tasksReducer\";\nimport MainInput from \"../mainInput/MainInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Task({\n  task\n}) {\n  _s();\n  const [checked1, setChecked] = useState(!!task.task_is_done);\n  const [todoName, changeTaskName] = useState(task.task_name);\n  const [visible, setVisible] = useState(true);\n  const [taskError, setTaskError] = useState(\"\");\n  const dispatch = useAppDispatch();\n  const deleteTaskHandler = id => {\n    dispatch(deleteTask(id));\n  };\n  const doubleClickHandler = () => {\n    setVisible(false);\n  };\n  const editHandler = () => setVisible(true);\n  const editTaskHandler = (id, value) => {\n    if (value.trim()) {\n      const updatedCurrentTodo = {\n        task_name: value,\n        taks_is_done: checked1,\n        tasks_todo_id: id\n      };\n      dispatch(updateTask({\n        id,\n        data: updatedCurrentTodo\n      }));\n      return;\n    }\n    setTaskError(\"task name can't be empty\");\n  };\n  return /*#__PURE__*/_jsxDEV(Task__Container, {\n    $width: \"100%\",\n    children: visible ? /*#__PURE__*/_jsxDEV(Task__Name__Wrapper, {\n      $width: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(Task__Label, {\n        $isDone: checked1,\n        onClick: doubleClickHandler,\n        children: task.task_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checked1,\n        onChange: () => setChecked(!checked1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), checked1 && /*#__PURE__*/_jsxDEV(Button, {\n        icon: closeBtn,\n        onClick: () => deleteTaskHandler(task.task_id),\n        tooltip: \"create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Task__Input__Wrapper, {\n      $width: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(MainInput, {\n        todo: todoName,\n        setTodo: changeTaskName,\n        setError: setTaskError,\n        edit: editHandler,\n        editTodoHandler: editTaskHandler,\n        todo_id: task.task_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Task__Name__Error__Wrapper, {\n        children: taskError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Task, \"oe2eABLDsmNInLUrGb/uaLaY0cQ=\", false, function () {\n  return [useAppDispatch];\n});\n_c = Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","Task__Container","Task__Input__Wrapper","Task__Label","Task__Name__Error__Wrapper","Task__Name__Wrapper","closeBtn","Button","useAppDispatch","deleteTask","updateTask","MainInput","jsxDEV","_jsxDEV","Task","task","_s","checked1","setChecked","task_is_done","todoName","changeTaskName","task_name","visible","setVisible","taskError","setTaskError","dispatch","deleteTaskHandler","id","doubleClickHandler","editHandler","editTaskHandler","value","trim","updatedCurrentTodo","taks_is_done","tasks_todo_id","data","$width","children","$isDone","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","icon","task_id","tooltip","todo","setTodo","setError","edit","editTodoHandler","todo_id","_c","$RefreshReg$"],"sources":["/home/alex/code/TodoWithBackend/front/src/features/tasks/Task.tsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {TaskType} from \"../../api/apiTypes\";\r\nimport {Task__Container, Task__Input__Wrapper, Task__Label, Task__Name__Error__Wrapper, Task__Name__Wrapper} from \"./Task.styles\";\r\nimport {closeBtn} from \"../todos/Todo.styles\";\r\nimport Button from \"../common/Button\";\r\nimport {useAppDispatch} from \"../../store/store\";\r\nimport {deleteTask, updateTask} from \"./tasksReducer\";\r\nimport MainInput from \"../mainInput/MainInput\";\r\n\r\ntype TaskComponentType = {\r\n    task: TaskType;\r\n};\r\n\r\nexport default function Task({task}: TaskComponentType) {\r\n    const [checked1, setChecked] = useState(!!task.task_is_done);\r\n    const [todoName, changeTaskName] = useState(task.task_name);\r\n    const [visible, setVisible] = useState(true);\r\n    const [taskError, setTaskError] = useState(\"\");\r\n    const dispatch = useAppDispatch();\r\n    const deleteTaskHandler = (id: string) => {\r\n        dispatch(deleteTask(id));\r\n    };\r\n    const doubleClickHandler = () => {\r\n        setVisible(false);\r\n    };\r\n    const editHandler = () => setVisible(true);\r\n    const editTaskHandler = (id: string, value: string) => {\r\n        if (value.trim()) {\r\n            const updatedCurrentTodo = {\r\n                task_name: value,\r\n                taks_is_done: checked1,\r\n                tasks_todo_id: id\r\n            };\r\n            dispatch(updateTask({id, data: updatedCurrentTodo}));\r\n            return\r\n        }\r\n        setTaskError(\"task name can't be empty\");\r\n    };\r\n    return (\r\n        <Task__Container $width=\"100%\">\r\n            {visible ? (\r\n                <Task__Name__Wrapper $width=\"100%\">\r\n                    <Task__Label $isDone={checked1} onClick={doubleClickHandler}>\r\n                        {task.task_name}\r\n                    </Task__Label>\r\n                    <input type=\"checkbox\" checked={checked1} onChange={() => setChecked(!checked1)} />\r\n                    {checked1 && (\r\n                        <Button icon={closeBtn} onClick={() => deleteTaskHandler(task.task_id)} tooltip=\"create task\" />\r\n                    )}\r\n                </Task__Name__Wrapper>\r\n            ) : (\r\n                <Task__Input__Wrapper $width=\"100%\">\r\n                    <MainInput\r\n                        todo={todoName}\r\n                        setTodo={changeTaskName}\r\n                        setError={setTaskError}\r\n                        edit={editHandler}\r\n                        editTodoHandler={editTaskHandler}\r\n                        todo_id={task.task_id}\r\n                    />\r\n                    <Task__Name__Error__Wrapper>{taskError}</Task__Name__Error__Wrapper>\r\n                </Task__Input__Wrapper>\r\n            )}\r\n        </Task__Container>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}